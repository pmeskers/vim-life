" Tab completion options for files
set wildmode=longest,list,full
set wildmenu

" Map spacebar to clear highlighting
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>""

" Map <leader>C to copy current file path
map <leader>C :let @* = expand("%")<CR>:echo "Copied: ".expand("%")<CR>

" General settings
set number              " Line numbers always on

set tabstop=2           " Set width of tabs
set shiftwidth=2        " Set width of indents
set expandtab           " Expand tabs as spaces
set smarttab            " Automatic tab alignment

set hlsearch            " Search highlighting

set list                " Show whitespace
set listchars=trail:Â·   " Use a pretty whitespace character

set autowriteall                            " Save when buffer-switching things.
autocmd BufLeave,FocusLost * silent! wall   " Save on losing focus

set swapfile                                " Keep swapfiles in clean place
set directory=~/.vim-tmp,~/tmp,/var/tmp,/tmp
set backupdir=~/.vim-tmp,~/tmp,/var/tmp,/tmp

set nofoldenable       " Turn off folding, for now

" Whitespace cleanup
" Strip trailing whitespace files on save
function! StripTrailingWhitespace()
  let save_cursor = getpos(".")
  %s/\s\+$//e
  call setpos('.', save_cursor)
endfunction
autocmd BufWritePre * call StripTrailingWhitespace()

" Configure tabline to be something readable/useful
" Taken from https://github.com/pivotal/vim-config/blob/7db28294af42d3cd6ecd38386dcdf7a4061bdf6e/init/tabline.vim
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%2*')
            let s .= ' '
            let wn = tabpagewinnr(i,'$')

            let s .= '%#TabNum#'
            let s .= i
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s .= ' ' . file . ' '
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
        return s
    endfunction
    set stal=2
    set tabline=%!MyTabLine()
    set showtabline=1
    highlight link TabNum Special
endif

" Pico-8 LUA config
autocmd BufNewFile,BufRead *.p8   set syntax=lua
